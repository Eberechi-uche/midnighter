import Head from "next/head";
import Card from "@/components/Card/Card";
import { useEffect, useState } from "react";
import { Flex, Grid, Stack } from "@chakra-ui/react";
import FilterButtons from "@/components/Buttons/FilterButtons";
import { Skeleton } from "@chakra-ui/react";
type Data = {
  name: string;
  image: string;
  attributes: {
    Architecture: string;
    Background: string;
    Car: string;
    Decoration: string;
    Foreground: string;
    Interior: string;
    Midground: string;
    Sky: string;
    "Sky Element": string;
    Street: string;
    futurePoints: number;
    ZenPoints: number;
    Character: string;
  };
  id: number;
};
export default function Home() {
  const [nft, setNft] = useState<Data[]>([]);
  const [filterValue, setFilterValue] = useState<string[]>([]);
  const [filteredNft, setFilteredNft] = useState<Data[]>([]);
  const [loading, setLoading] = useState(true);
  const [options] = useState<string[]>([
    "Full greenhouse",
    "Perfect Ramen",
    "Brutalist Space",
    "Full Underpass",
    "The Real hidden denza",
    "Public Transport",
    "Tropical",
    "Full Convience Store",
    "Water Elements",
    "Cat's Dinner Bowl",
    "Trible Pets",
  ]);

  const handleFilter = (filterOption: string) => {
    const value = filterValue.find((element) => element === filterOption);

    if (value) {
      const filtered = filterValue.filter(
        (Element) => Element !== filterOption
      );
      setFilterValue(filtered);
      return;
    } else {
      setFilterValue((prev) => [...prev, filterOption]);
    }
  };

  useEffect(() => {
    try {
      fetch(
        "https://stombprd01.blob.core.windows.net/static/tokensinfo/mb_result.json"
      )
        .then((response) => response.json())
        .then((data) => {
          let filteredData = data.slice(0, 300);
          setNft(filteredData as Data[]);
          setFilteredNft(filteredData);
          setLoading(false);
        });
    } catch (error: any) {}
  }, []);
  useEffect(() => {
    let filtered: Data[] = [];
    filterValue.forEach((item) => {
      if (item === "Full greenhouse") {
        fullGreenHouse(nft, filtered);
      } else if (item === "Perfect Ramen") {
        perfectRamen(nft, filtered);
      } else if (item === "Brutalist Space") {
        BrutalistSpace(nft, filtered);
      } else if (item === "Full Underpass") {
        fullUnderpass(nft, filtered);
      } else if (item === "The Real hidden denza") {
        realHiddenDenza(nft, filtered);
      } else if (item === "Full Convience Store") {
        fullConvenienceStore(nft, filtered);
      } else if (item === "Water Elements") {
        waterElement(nft, filtered);
      } else if (item === "Cat's Dinner Bowl") {
        catsBowl(nft, filtered);
      } else if (item === "Triple Pets") {
        TriplePets(nft, filtered);
      } else if (item === "Public Transport") {
        publicTransport(nft, filtered);
      } else if (item === "Tropical") {
        Tropical(nft, filtered);
      }
    });
    setFilteredNft(filtered);
    if (filterValue.length === 0) {
      setFilteredNft(nft);
    }
  }, [filterValue]);
  return (
    <>
      <Head>
        <title>Midnighter</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Flex
          overflowX={"scroll"}
          sx={{
            "::-webkit-scrollbar": {
              display: "none",
            },
          }}
        >
          {options.map((value) => (
            <FilterButtons
              name={value}
              selected={filterValue.includes(value)}
              filter={handleFilter}
              key={value}
            />
          ))}
        </Flex>
        <Grid
          gap={"1"}
          templateColumns={{
            md: "repeat(2, 1fr)",
            lg: "repeat(3, 1fr)",
          }}
        >
          {loading && (
            <>
              {options.map((item, index) => (
                <Skeleton
                  startColor="orange.200"
                  endColor="orange.500"
                  height="250px"
                  width={"100%"}
                  key={index}
                />
              ))}
            </>
          )}
          {nft &&
            filteredNft.map((data) => (
              <Card name={data.name} image={data.image} key={data.id} />
            ))}
        </Grid>
      </main>
    </>
  );
}

const fullGreenHouse = (array: Data[], filter: Data[]) => {
  let greenHouse = array.filter((Element: Data) => {
    return (
      Element.attributes.Architecture === "Greenhouse" &&
      Element.attributes.Interior === "Overgrown"
    );
  });
  greenHouse.forEach((item) => {
    filter.push(item);
  });
};
const perfectRamen = (array: Data[], filter: Data[]) => {
  let perfectRamen = array.filter((Element: Data) => {
    return (
      Element.attributes.Architecture === "Japanese Traditional" &&
      Element.attributes.Interior === "Ramen Shop" &&
      Element.attributes.Decoration === "Pork Noodles"
    );
  });
  perfectRamen.forEach((item) => {
    filter.push(item);
  });
};
const BrutalistSpace = (array: Data[], filter: Data[]) => {
  let BrutalistSpace = array.filter((Element: Data) => {
    return (
      Element.attributes.Architecture === "Modern" &&
      Element.attributes.Interior === "Space"
    );
  });
  BrutalistSpace.forEach((item) => {
    filter.push(item);
  });
};
const fullUnderpass = (array: Data[], filter: Data[]) => {
  let fullUnderpass = array.filter((Element: Data) => {
    return (
      Element.attributes.Architecture === "Tokyo Street" &&
      Element.attributes.Midground === "Industrial" &&
      Element.attributes.Background === "Highway"
    );
  });
  fullUnderpass.forEach((item) => {
    filter.push(item);
  });
};
const realHiddenDenza = (array: Data[], filter: Data[]) => {
  let realHiddenDenza = array.filter((Element: Data) => {
    return (
      Element.attributes.Architecture === "concrete denza" &&
      Element.attributes.Car === "any tram"
    );
  });
  realHiddenDenza.forEach((item) => {
    filter.push(item);
  });
};
const fullConvenienceStore = (array: Data[], filter: Data[]) => {
  let ConvienceStore = array.filter((Element: Data) => {
    return (
      Element.attributes.Interior === "Midnight Breeze Shop" &&
      Element.attributes.Architecture === "Convenience Store" &&
      Element.attributes.Decoration === "GM Shop"
    );
  });
  ConvienceStore.forEach((item) => {
    filter.push(item);
  });
};
const waterElement = (array: Data[], filter: Data[]) => {
  let waterElement = array.filter((Element: Data) => {
    return (
      Element.attributes.Interior === "Fish Bowl" &&
      Element.attributes.Architecture === "Concrete Wave" &&
      (Element.attributes.Background === "Beach" ||
        Element.attributes.Background === "Island Sea")
    );
  });
  waterElement.forEach((item) => {
    filter.push(item);
  });
};
const catsBowl = (array: Data[], filter: Data[]) => {
  let catsBowl = array.filter((Element: Data) => {
    return (
      Element.attributes.Interior === "Fish Bowl" &&
      Element.attributes["Sky Element"] === "Cat Kami"
    );
  });
  catsBowl.forEach((item) => {
    filter.push(item);
  });
};
const TriplePets = (array: Data[], filter: Data[]) => {
  let TriplePets = array.filter((Element: Data) => {
    return (
      Element.attributes.Interior === "Tatami Shiba Cat" &&
      (Element.attributes.Character === "Bus Stop" ||
        Element.attributes.Character === "Samu Frogs")
    );
  });
  TriplePets.forEach((item) => {
    filter.push(item);
  });
};
const publicTransport = (array: Data[], filter: Data[]) => {
  let publicTransport = array.filter((Element: Data) => {
    return (
      Element.attributes.Foreground === "Train Light" &&
      Element.attributes.Car === "Tram/Tram Pink/Tram Green/Tram Tagged" &&
      Element.attributes.Character === "Bus Stop"
    );
  });
  publicTransport.forEach((item) => {
    filter.push(item);
  });
};
const Tropical = (array: Data[], filter: Data[]) => {
  let tropical = array.filter((Element: Data) => {
    return (
      Element.attributes.Midground === "Palms" &&
      (Element.attributes.Background === "Beach" ||
        Element.attributes.Background === "Island Sea")
    );
  });
  tropical.forEach((item) => {
    filter.push(item);
  });
};
