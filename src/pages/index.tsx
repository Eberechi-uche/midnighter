import Head from "next/head";
import Card from "@/components/Card/Card";
import { useEffect, useState } from "react";
import { Button, Flex, Grid, Stack } from "@chakra-ui/react";
import FilterButtons from "@/components/Buttons/FilterButtons";
import Filter from "@/utilities/Filter";
import { Skeleton } from "@chakra-ui/react";
export type Data = {
  name: string;
  image: string;
  attributes: {
    Architecture: string;
    Background: string;
    Car: string;
    Decoration: string;
    Foreground: string;
    Interior: string;
    Midground: string;
    Sky: string;
    "Sky Element": string;
    Street: string;
    futurePoints: number;
    ZenPoints: number;
    Character: string;
  };
  id: number;
};
export default function Home() {
  const [allNft, setAllNft] = useState<Data[]>([]);
  const [nft, setNft] = useState<Data[]>([]);
  const [filterValue, setFilterValue] = useState<string[]>([]);
  const [paginatedNf, setpaginatedNf] = useState<Data[]>([]);
  const [itemCount, setItemCount] = useState(10);
  const [loading, setLoading] = useState(true);
  const [options] = useState<string[]>([
    "Full greenhouse",
    "Perfect Ramen",
    "Brutalist Space",
    "Full Underpass",
    "The Real hidden denza",
    "Public Transport",
    "Tropical",
    "Full Convience Store",
    "Water Elements",
    "Cat's Dinner Bowl",
    "Triple Pets",
  ]);

  const handlePagination = () => {
    const newItem = nft.slice(itemCount, itemCount + 10);

    if (filterValue.length) {
      const result = Filter(filterValue, newItem);
      setpaginatedNf((prev) => [...prev, ...result]);
      return;
    }
    setpaginatedNf((prev) => [...prev, ...newItem]);
    setItemCount((prev) => prev + 10);
  };

  const handleFilter = (filterOption: string) => {
    const value = filterValue.find((element) => element === filterOption);

    if (value) {
      const filtered = filterValue.filter(
        (Element) => Element !== filterOption
      );
      setFilterValue(filtered);
      return;
    } else {
      setFilterValue((prev) => [...prev, filterOption]);
    }
  };

  useEffect(() => {
    try {
      fetch(
        "https://stombprd01.blob.core.windows.net/static/tokensinfo/mb_result.json"
      )
        .then((response) => response.json())
        .then((data) => {
          let filteredData = data.slice(0, 50);
          setNft(filteredData as Data[]);
          setAllNft(data as Data[]);
          setpaginatedNf(filteredData.slice(0, 10));
          setLoading(false);
        });
    } catch (error: any) {}
  }, []);
  useEffect(() => {
    const result = Filter(filterValue, allNft);
    setpaginatedNf(result.slice(0, 10));
    setItemCount(10);
    setNft(result);
    if (filterValue.length === 0) {
      setpaginatedNf(allNft.slice(0, 10));
    }
  }, [filterValue]);

  return (
    <>
      <Head>
        <title>Midnighter</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Flex
          overflowX={"scroll"}
          sx={{
            "::-webkit-scrollbar": {
              display: "none",
            },
          }}
        >
          {options.map((value) => (
            <FilterButtons
              name={value}
              selected={filterValue.includes(value)}
              filter={handleFilter}
              key={value}
            />
          ))}
        </Flex>
        <Grid
          gap={"1"}
          templateColumns={{
            md: "repeat(2, 1fr)",
            lg: "repeat(3, 1fr)",
          }}
        >
          {loading && (
            <>
              {options.map((item, index) => (
                <Skeleton
                  startColor="orange.200"
                  endColor="orange.500"
                  height="250px"
                  width={"100%"}
                  key={index}
                />
              ))}
            </>
          )}
          {nft &&
            paginatedNf.map((data) => (
              <Card name={data.name} image={data.image} key={data.id} />
            ))}
        </Grid>
        <Flex width={"100%"} py={"20px"} justify={"center"}>
          <Button
            width={{
              base: "20%",
              md: "7%",
            }}
            borderRadius={"full"}
            colorScheme={"orange"}
            fontWeight={"thin"}
            onClick={handlePagination}
            size={"md"}
          >
            more
          </Button>
        </Flex>
      </main>
    </>
  );
}
